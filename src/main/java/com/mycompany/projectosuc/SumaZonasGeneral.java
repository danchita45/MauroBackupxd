/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projectosuc;

import EDD.IngresoEgreso;
import EDD.ListaDoblementeLigada;
import EDD.NodoLista;
import EDD.Sucursales;
import ioarchico.lsarchivo;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Danchita45
 */
public class SumaZonasGeneral extends javax.swing.JFrame {

    /**
     * Creates new form SumaZonasGeneral
     */
    public SumaZonasGeneral() {
        initComponents();
        ConsultaCIE();
    }

    public void ConsultaCIE() {
        double Balancep = 0.0;
        double Balancen = 0.0;

        lsarchivo narchivo = new lsarchivo();
        ListaDoblementeLigada ListaGeneral = narchivo.SacaDatos();

        ListaDoblementeLigada paraCI = new ListaDoblementeLigada();
        ListaDoblementeLigada paraCE = new ListaDoblementeLigada();

        NodoLista nodoSuc = ListaGeneral.getr();

        int i = 0;

        while (i < ListaGeneral.count()) {

            Sucursales sucr = (Sucursales) nodoSuc.getTObj();

            ListaDoblementeLigada listaComodinCI = (ListaDoblementeLigada) sucr.getcI();

            if (listaComodinCI != null) {
                NodoLista nodosCI = listaComodinCI.getr();

                while (nodosCI != null) {

                    IngresoEgreso IE = (IngresoEgreso) nodosCI.getTObj();
                    System.out.println(IE);
                    NodoLista nodopainsertar = new NodoLista();
                    nodopainsertar.setEtiqueta("nodoCI");
                    nodopainsertar.setTObj(IE);

                    paraCI.inserta(nodopainsertar);
                    nodosCI = nodosCI.getSig();
                }
            }

            ListaDoblementeLigada listaComodinCE = (ListaDoblementeLigada) sucr.getcE();
            if (listaComodinCE != null) {
                NodoLista nodosCE = listaComodinCE.getr();
                while (nodosCE != null) {
                    IngresoEgreso IE = (IngresoEgreso) nodosCE.getTObj();

                    NodoLista nodopainsertar = new NodoLista();
                    nodopainsertar.setEtiqueta("nodoCE");
                    nodopainsertar.setTObj(IE);

                    paraCE.inserta(nodopainsertar);
                    nodosCE = nodosCE.getSig();
                }
            }
            nodoSuc = nodoSuc.getSig();
            i++;
        }

        if (paraCI == null) {
            paraCI = new ListaDoblementeLigada();
        }

        if (paraCE == null) {
            paraCE = new ListaDoblementeLigada();
        }

        DefaultTableModel dt = new DefaultTableModel(new String[]{"No.Ingreso", "Sucursal", "Monto", "Fecha"}, paraCI.count());
        DefaultTableModel dtE = new DefaultTableModel(new String[]{"No.Ingreso", "Sucursal", "Monto", "Fecha"}, paraCI.count());
        TablaIngresos.setModel(dt);
        TablaEgresos.setModel(dtE);
        TableModel modeldata = TablaIngresos.getModel();
        TableModel modeldataE = TablaEgresos.getModel();

        int j = 0;
        NodoLista nodosCI = paraCI.getr();
        while (j < paraCI.count()) {
            IngresoEgreso sucr = (IngresoEgreso) nodosCI.getTObj();

            modeldata.setValueAt(j + 1, j, 0);
            modeldata.setValueAt(sucr.getSucursal(), j, 1);
            modeldata.setValueAt(sucr.getMonto(), j, 2);
            modeldata.setValueAt(sucr.getFecha(), j, 3);
            nodosCI = nodosCI.getSig();
            Balancep += sucr.getMonto();
            j++;
        }

        int y = 0;
        NodoLista nodosCE = paraCE.getr();
        while (y < paraCE.count()) {
            IngresoEgreso sucr = (IngresoEgreso) nodosCE.getTObj();

            modeldataE.setValueAt(y + 1, y, 0);
            modeldataE.setValueAt(sucr.getSucursal(), y, 1);
            modeldataE.setValueAt(sucr.getMonto(), y, 2);
            modeldataE.setValueAt(sucr.getFecha(), y, 3);

            nodosCE = nodosCE.getSig();
            Balancen += sucr.getMonto();
            y++;
        }

        double BalanceTotal = Balancep - Balancen;
        balanceTotal.setText(String.valueOf(BalanceTotal));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaEgresos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaIngresos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        balanceTotal = new javax.swing.JLabel();
        BuscarZona = new javax.swing.JButton();
        Zonatxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        TablaEgresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No.Egreso", "Sucursal", "Monto", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaEgresos);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Egresos");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel3.setText("Ingresos");

        TablaIngresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No.Egreso", "Sucursal", "Monto", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TablaIngresos);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Balance Total: ");

        BuscarZona.setText("Buscar");
        BuscarZona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarZonaActionPerformed(evt);
            }
        });

        Zonatxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZonatxtActionPerformed(evt);
            }
        });
        Zonatxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ZonatxtKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(151, 151, 151)
                                        .addComponent(jLabel3)
                                        .addGap(341, 341, 341)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(51, 51, 51)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(335, 335, 335)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(balanceTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(452, 452, 452)
                                .addComponent(BuscarZona)))
                        .addGap(0, 26, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(391, 391, 391)
                .addComponent(Zonatxt, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(Zonatxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BuscarZona)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(balanceTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MenuPrinc m = new MenuPrinc();
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ZonatxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZonatxtActionPerformed

    }//GEN-LAST:event_ZonatxtActionPerformed

    private void BuscarZonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarZonaActionPerformed

        if (Zonatxt.getText().isEmpty()) {
            ConsultaCIE();
        }
        double Balancep = 0.0;
        double Balancen = 0.0;

        lsarchivo narchivo = new lsarchivo();
        ListaDoblementeLigada ListaGeneral = narchivo.SacaDatos();

        ListaDoblementeLigada paraCI = new ListaDoblementeLigada();
        ListaDoblementeLigada paraCE = new ListaDoblementeLigada();

        NodoLista nodoSuc = ListaGeneral.getr();

        int i = 0;

        while (i < ListaGeneral.count()) {
            Sucursales sucr = (Sucursales) nodoSuc.getTObj();
            if (sucr.getZona() == Integer.parseInt(Zonatxt.getText())) {
                ListaDoblementeLigada listaComodinCI = (ListaDoblementeLigada) sucr.getcI();

                if (listaComodinCI != null) {
                    NodoLista nodosCI = listaComodinCI.getr();

                    while (nodosCI != null) {

                        IngresoEgreso IE = (IngresoEgreso) nodosCI.getTObj();
                        System.out.println(IE);
                        NodoLista nodopainsertar = new NodoLista();
                        nodopainsertar.setEtiqueta("nodoCI");
                        nodopainsertar.setTObj(IE);

                        paraCI.inserta(nodopainsertar);
                        nodosCI = nodosCI.getSig();
                    }
                }

                ListaDoblementeLigada listaComodinCE = (ListaDoblementeLigada) sucr.getcE();
                if (listaComodinCE != null) {
                    NodoLista nodosCE = listaComodinCE.getr();
                    while (nodosCE != null) {
                        IngresoEgreso IE = (IngresoEgreso) nodosCE.getTObj();

                        NodoLista nodopainsertar = new NodoLista();
                        nodopainsertar.setEtiqueta("nodoCE");
                        nodopainsertar.setTObj(IE);

                        paraCE.inserta(nodopainsertar);
                        nodosCE = nodosCE.getSig();
                    }
                }
            }

            nodoSuc = nodoSuc.getSig();
            i++;
        }

        if (paraCI == null) {
            paraCI = new ListaDoblementeLigada();
        }

        if (paraCE == null) {
            paraCE = new ListaDoblementeLigada();
        }

        DefaultTableModel dt = new DefaultTableModel(new String[]{"No.Ingreso", "Sucursal", "Monto", "Fecha"}, paraCI.count());
        DefaultTableModel dtE = new DefaultTableModel(new String[]{"No.Ingreso", "Sucursal", "Monto", "Fecha"}, paraCI.count());
        TablaIngresos.setModel(dt);
        TablaEgresos.setModel(dtE);
        TableModel modeldata = TablaIngresos.getModel();
        TableModel modeldataE = TablaEgresos.getModel();

        int j = 0;
        NodoLista nodosCI = paraCI.getr();
        while (j < paraCI.count()) {
            IngresoEgreso sucr = (IngresoEgreso) nodosCI.getTObj();

            modeldata.setValueAt(j + 1, j, 0);
            modeldata.setValueAt(sucr.getSucursal(), j, 1);
            modeldata.setValueAt(sucr.getMonto(), j, 2);
            modeldata.setValueAt(sucr.getFecha(), j, 3);
            nodosCI = nodosCI.getSig();
            Balancep += sucr.getMonto();
            j++;
        }

        int y = 0;
        NodoLista nodosCE = paraCE.getr();
        while (y < paraCE.count()) {
            IngresoEgreso sucr = (IngresoEgreso) nodosCE.getTObj();

            modeldataE.setValueAt(y + 1, y, 0);
            modeldataE.setValueAt(sucr.getSucursal(), y, 1);
            modeldataE.setValueAt(sucr.getMonto(), y, 2);
            modeldataE.setValueAt(sucr.getFecha(), y, 3);

            nodosCE = nodosCE.getSig();
            Balancen += sucr.getMonto();
            y++;
        }

        double BalanceTotal = Balancep - Balancen;
        balanceTotal.setText(String.valueOf(BalanceTotal));


    }//GEN-LAST:event_BuscarZonaActionPerformed

    private void ZonatxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ZonatxtKeyReleased

        if (!Zonatxt.getText().matches("[0-9]{1,3}")) {
            JOptionPane.showMessageDialog(this, "Este Campo solo Acepta Numeros");
            Zonatxt.setText("");
        }else{
            BuscarZonaActionPerformed(null); 
        }
       
    }//GEN-LAST:event_ZonatxtKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SumaZonasGeneral.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SumaZonasGeneral.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SumaZonasGeneral.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SumaZonasGeneral.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SumaZonasGeneral().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuscarZona;
    private javax.swing.JTable TablaEgresos;
    private javax.swing.JTable TablaIngresos;
    private javax.swing.JTextField Zonatxt;
    private javax.swing.JLabel balanceTotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
