/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projectosuc;

import EDD.ArchivoSuc;
import EDD.IngresoEgreso;
import EDD.ListaDoblementeLigada;
import EDD.NodoLista;
import EDD.Sucursales;
import ioarchico.lsarchivo;
import java.util.LinkedList;
import java.util.StringTokenizer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Danchita45
 */
public class IngresosEgresos extends javax.swing.JFrame {

    /**
     * Creates new form IngresosEgresos
     */
    public IngresosEgresos() {
        initComponents();

        double Balancep = 0.0;
        double Balancen = 0.0;

        lsarchivo narchivo = new lsarchivo();
        ListaDoblementeLigada ListaGeneral = narchivo.SacaDatos();

        ListaDoblementeLigada paraCI = new ListaDoblementeLigada();
        ListaDoblementeLigada paraCE = new ListaDoblementeLigada();

        NodoLista nodoSuc = ListaGeneral.getr();

        int i = 0;

        while (i < ListaGeneral.count()) {

            Sucursales sucr = (Sucursales) nodoSuc.getTObj();

            ListaDoblementeLigada listaComodinCI = (ListaDoblementeLigada) sucr.getcI();

            if (listaComodinCI != null) {
                NodoLista nodosCI = listaComodinCI.getr();

                while (nodosCI != null ) {
                    
                    IngresoEgreso IE = (IngresoEgreso) nodosCI.getTObj();
                    System.out.println(IE);
                    NodoLista nodopainsertar = new NodoLista();
                    nodopainsertar.setEtiqueta("nodoCI");
                    nodopainsertar.setTObj(IE);

                    paraCI.inserta(nodopainsertar);
                    nodosCI = nodosCI.getSig();
                }
            }

            ListaDoblementeLigada listaComodinCE = (ListaDoblementeLigada) sucr.getcE();
            if (listaComodinCE != null) {
                NodoLista nodosCE = listaComodinCE.getr();
                while (nodosCE!= null) {
                    IngresoEgreso IE = (IngresoEgreso) nodosCE.getTObj();

                    NodoLista nodopainsertar = new NodoLista();
                    nodopainsertar.setEtiqueta("nodoCE");
                    nodopainsertar.setTObj(IE);

                    paraCE.inserta(nodopainsertar);
                    nodosCE = nodosCE.getSig();
                }
            }
            nodoSuc = nodoSuc.getSig();
            i++;
        }

        if (paraCI == null) {
            paraCI = new ListaDoblementeLigada();
        }

        if (paraCE == null) {
            paraCE = new ListaDoblementeLigada();
        }

        DefaultTableModel dt = new DefaultTableModel(new String[]{"No.Ingreso", "Sucursal", "Monto", "Fecha"}, paraCI.count());
        DefaultTableModel dtE = new DefaultTableModel(new String[]{"No.Ingreso", "Sucursal", "Monto", "Fecha"}, paraCI.count());
        TablaIngresos.setModel(dt);
        TablaEgresos.setModel(dtE);
        TableModel modeldata = TablaIngresos.getModel();
        TableModel modeldataE = TablaEgresos.getModel();

        int j = 0;
        NodoLista nodosCI = paraCI.getr();
        while (j < paraCI.count()) {
            IngresoEgreso sucr = (IngresoEgreso) nodosCI.getTObj();

            modeldata.setValueAt(j + 1, j, 0);
            modeldata.setValueAt(sucr.getSucursal(), j, 1);
            modeldata.setValueAt(sucr.getMonto(), j, 2);
            modeldata.setValueAt(sucr.getFecha(), j, 3);
            nodosCI = nodosCI.getSig();
            Balancep += sucr.getMonto();
            j++;
        }

        int y = 0;
        NodoLista nodosCE = paraCE.getr();
        while (y < paraCE.count()) {
            IngresoEgreso sucr = (IngresoEgreso) nodosCE.getTObj();

            modeldataE.setValueAt(y + 1, y, 0);
            modeldataE.setValueAt(sucr.getSucursal(), y, 1);
            modeldataE.setValueAt(sucr.getMonto(), y, 2);
            modeldataE.setValueAt(sucr.getFecha(), y, 3);

            nodosCE = nodosCE.getSig();
            Balancen += sucr.getMonto();
            y++;
        }

        double BalanceTotal = Balancep - Balancen;
        balanceTotal.setText(String.valueOf(BalanceTotal));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaEgresos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaIngresos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        balanceTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TablaEgresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No.Egreso", "Sucursal", "Monto", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaEgresos);
        if (TablaEgresos.getColumnModel().getColumnCount() > 0) {
            TablaEgresos.getColumnModel().getColumn(0).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(528, 79, -1, 230));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Egresos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(651, 29, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel3.setText("Ingresos");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 29, -1, -1));

        TablaIngresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No.Egreso", "Sucursal", "Monto", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TablaIngresos);
        if (TablaIngresos.getColumnModel().getColumnCount() > 0) {
            TablaIngresos.getColumnModel().getColumn(0).setResizable(false);
        }

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 79, -1, 230));

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(957, 0, 34, -1));

        jLabel2.setText("Balance Total: ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 420, 110, 30));
        getContentPane().add(balanceTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 420, 170, 30));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MenuPrinc m = new MenuPrinc();
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresosEgresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresosEgresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresosEgresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresosEgresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresosEgresos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaEgresos;
    private javax.swing.JTable TablaIngresos;
    private javax.swing.JLabel balanceTotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
